name: "Commit"

on:
  workflow_dispatch:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main

permissions:
  checks: write
  contents: read
  packages: write

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-with-uv
        with:
          run-tasks: "tox"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-with-uv
        with:
          run-tasks: "tox -e lint"

  format:
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-with-uv
        with:
          run-tasks: "tox -e format"

  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-with-uv
        with:
          run-tasks: "tox -e coverage"

      - name: "Archive Coverage Report"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: reports/coverage/

  bandit:
    runs-on: ubuntu-latest
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-with-uv
        with:
          run-tasks: "tox -e bandit"

      - name: "Archive Bandit Report"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: reports/bandit/report.xml

  build-image:
    runs-on: ubuntu-latest
    if: github.secret_source == 'Actions' && github.ref == 'refs/heads/main'
    needs:
      - unit-tests
      - lint
      - format
      - coverage
      - bandit
    steps:
      - name: "Git Checkout"
        uses: actions/checkout@v4

      - uses: ./.github/actions/run-with-uv
        with:
          run-tasks: "--version"

      - name: "Log in to GitHub Docker registry"
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

      - name: "Build Docker image"
        run: docker build -f ci/Dockerfile -t ghcr.io/${{ github.repository_owner }}/python-build:latest .

      - name: "Push Docker image"
        run: docker push ghcr.io/${{ github.repository_owner }}/python-build:latest